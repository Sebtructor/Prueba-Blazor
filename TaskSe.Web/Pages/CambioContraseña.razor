@layout LoginTemplate
@page "/CambioPass/{idSolicitud}"
@using TaskSe.Model.Models.Configuracion.Perfilamiento
@using TaskSe.Services.Interfaces.Configuracion.Perfilamiento
@using System.Text.RegularExpressions

@inject IUserService _userService
@inject ILogger<CambioContraseña> _logger

<PageTitle>Recuperación de Contraseña | App Demo Blazor</PageTitle>

@if (!_isLoading)
{
    <div class="limiter">
        <div class="container-login100">
            <div class="wrap-login100 p-l-50 p-r-50 p-t-77 p-b-30">
                <span class="login100-form-title p-b-55">
                    Confirma tu nueva contraseña
                </span>

                <div class="wrap-input100 validate-input m-b-16" data-validate="Password is required">
                    <input class="input100" type="password" name="pass" @bind-value="password" placeholder="Contraseña">
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <span class="lnr lnr-lock"></span>
                    </span>
                </div>

                <div class="wrap-input100 validate-input m-b-16" data-validate="Password is required">
                    <input class="input100" type="password" name="pass" @bind-value="password_confirmar" placeholder="Contraseña">
                    <span class="focus-input100"></span>
                    <span class="symbol-input100">
                        <span class="lnr lnr-lock"></span>
                    </span>
                </div>

                <div class="container-login100-form-btn p-t-25">
                    <button class="login100-form-btn" type="button" @onclick="@Restablecer">
                        Continuar
                    </button>
                </div>

            </div>
        </div>
    </div>
}
else
{
    <_Loading></_Loading>
}

@code {
    [Parameter]
    public string idSolicitud { get; set; }

    bool _isLoading = true;

    private SolicitudContraseña solicitud;
    private Dictionary<string, string> parametros;

    private string password;
    private string password_confirmar;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            parametros = _encryptService.desencriptarParametros(idSolicitud);

            solicitud = await _userService.getSolicitudContraseña(parametros["idSolicitud"]);

            if (solicitud is null)
            {
                await _jsRuntime.SweetAlertUsual("Error", "URL no válida", TipoMensajeSweetAlert.error);
                return;
            }

            if (solicitud.estado.Equals("Finalizado"))
            {
                await _jsRuntime.SweetAlertConfirmSuccess("Error", "Esta solicitud ya expiró", TipoMensajeSweetAlert.error);
                _navigationManager.NavigateTo("/");
            }

            double diferencia = (DateTime.Now - solicitud.fecha).TotalDays;

            if (diferencia > 1)
            {
                await _jsRuntime.SweetAlertConfirmSuccess("Error", "Esta solicitud ya expiró", TipoMensajeSweetAlert.error);
                _navigationManager.NavigateTo("/");
                _logger.LogWarning($"Error: Solicitud de reestablecimiento vencida para solicitud {solicitud.id_solicitud}");
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, $"Error al consultar información de solicitud de cambio de contraseña para solicitud {idSolicitud}");
            await _jsRuntime.SweetAlertUsual("Error", "Error al validar la solicitud", TipoMensajeSweetAlert.error);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        try
        {
            if (firsRender)
            {
                _isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception exe)
        {

        }
    }

    private async void Restablecer()
    {
        try{
            if (string.IsNullOrEmpty(password))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe diligenciar ambas contraseñas", TipoMensajeSweetAlert.error);
                return;
            }

            if (string.IsNullOrEmpty(password_confirmar))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe diligenciar ambas contraseñas", TipoMensajeSweetAlert.error);
                return;
            }

            if (!password.Equals(password_confirmar))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Las contraseñas deben coincidir", TipoMensajeSweetAlert.error);
                return;
            }

            string regexPass = @"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#\$%\^&\*]).{8,}$";

            if (!Regex.Match(password, regexPass).Success)
            {
                await _jsRuntime.SweetAlertUsual("Error", "La contraseña debe tener al menos 8 caracteres, un minúscula, una mayúscula, un número y un caracter especial ", TipoMensajeSweetAlert.error);
                return;
            }

            await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

            ResponseDTO respuesta = await _userService.completarSolicitudContraseña(solicitud.id_solicitud, password);

            if (respuesta.estado.Equals("OK"))
            {
                _logger.LogInformation($"Solicitud de recuperación de contraseña completada correctamente para Solicitud {solicitud.id_solicitud}");
                await _jsRuntime.SweetAlertConfirmSuccess("Correcto", "Solicitud de recuperación de contraseña finalizada", TipoMensajeSweetAlert.success);
                _navigationManager.NavigateTo("/");
            }
            else
            {
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
                return;
            }
        }
        catch(Exception exe){
            _logger.LogError(exe, $"Error al completar solicitud de cambio de contraseña para solicitud");
            await _jsRuntime.SweetAlertUsual("Error", "Error al completar la solicitud", TipoMensajeSweetAlert.error);
        }
    }
}
