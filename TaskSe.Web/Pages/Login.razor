@layout LoginTemplate
@page "/"
@using TaskSe.Model.DTO.Configuracion.Perfilamiento
@using TaskSe.Model.Models.Configuracion.Perfilamiento;
@using TaskSe.Services.Interfaces.Configuracion.Perfilamiento
@using TaskSe.Web.Services;
@using Microsoft.AspNetCore.Components.Server.Circuits;

@inject ICircuitUserService _circuitUserServer
@inject CircuitHandler BlazorCircuitHandler
@inject IUserService _userService
@inject ILogger<Login> _logger
@inject AuthorizationService _authService
@inject GooglereCaptchaService _googlereCaptchaService

<PageTitle>Login | App Demo Blazor</PageTitle>

@if (!_isLoading)
{
    <div class="p-4 p-md-5 flex-grow-1">
        <div class="row flex-between-center">
            <div class="col-auto">
                <h3>Account Login</h3>
            </div>
        </div>
        <form>
            <div class="mb-3"><label class="form-label" for="card-email">Email address</label><input class="form-control" id="card-email" type="email" /></div>
            <div class="mb-3">
                <div class="d-flex justify-content-between"><label class="form-label" for="card-password">Password</label></div><input class="form-control" id="card-password" type="password" />
            </div>
            <div class="row flex-between-center">
                <div class="col-auto">
                    <div class="form-check mb-0"><input class="form-check-input" type="checkbox" id="card-checkbox" checked="checked" /><label class="form-check-label mb-0" for="card-checkbox">Remember me</label></div>
                </div>
                <div class="col-auto"><a class="fs-10" href="forgot-password.html">Forgot Password?</a></div>
            </div>
            <div class="mb-3"><button class="btn btn-primary d-block w-100 mt-3" type="submit" name="submit">Log in</button></div>
        </form>
        <div class="position-relative mt-4">
            <hr />
        </div>
        <div class="row g-2 mt-2">
        </div>
    </div>

}
else
{
    <_Loading></_Loading>
}


@code {
    string token = "";
    public GoogleREspo googleREspo = new GoogleREspo();

    bool _isLoading = true;
    bool rememberMe = false;

    UserDTO usuario = new UserDTO();

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        try
        {
            if (firsRender)
            {
                await ValidarRememberMe();

                _isLoading = false;
                StateHasChanged();

                await _jsRuntime.InvokeVoidAsync("loadScript", "https://www.google.com/recaptcha/api.js?render=6LdSzOIUAAAAALm0JDVCho1mJWvnP9bLsajJvC8M");


                StateHasChanged();
            }
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al cargar datos de login");
        }
    }

    private async Task ValidarRememberMe()
    {
        try
        {
            var authState = await _authStateProvider.GetAuthenticationStateAsync();

            var user = authState.User;

            var ipAddress = await _jsRuntime.GetIpAddress();

            if (user.Identity.IsAuthenticated)
            {
                var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
                UserSession userSession = await customAuthStateProvider.GetActualUser();

                //La sesión se vence si han pasado más de 2 días desde último login
                if ((DateTime.Now - userSession.last_login.GetValueOrDefault()).TotalDays > 2)
                {
                    await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya que han han pasado más de 2 días desde último login {userSession.last_login.GetValueOrDefault()}");
                    await LimpiarSesion();
                    return;
                }

                Usuario tempUser = await _userService.getUsuarioByUser(userSession.UserName);

                //Usuario inactivo
                if (!tempUser.estado.Equals("1"))
                {
                    await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya se ha inactivado el usuario");
                    await LimpiarSesion();
                    return;
                }

                //Cambio de contraseña
                if (!tempUser.clave.Equals(userSession.hash_password))
                {
                    await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya que se ha cambiado la contraseña del usuario");
                    await LimpiarSesion();
                    return;
                }

                bool rememberMe = userSession.RememberMe;

                if (rememberMe)
                {
                    var remoteIpAddress = await _jsRuntime.GetIpAddress();
                    userSession.Ip = remoteIpAddress;
                    userSession.last_login = DateTime.Now;
                    await customAuthStateProvider.UpdateAuthenticationState(userSession);

                    CircuitHandlerService handler = (CircuitHandlerService)BlazorCircuitHandler;
                    _circuitUserServer.Connect(handler.CirtuidId, userSession);

                    await _userService.procesarIngreso(userSession.UserName, ipAddress, "Exitoso, ingreso por RememberMe entrando a pantalla de login");

                    _navigationManager.NavigateTo("/Home", true);
                }
                else
                {
                    await _userService.registrarAuditoriaCierreSesion(userSession.id_auditoria_login, userSession.UserName, ipAddress, $"La sesión se vence ya el usuario ha vuelto a la página de login");
                    await LimpiarSesion();
                }
            }

        }
        catch (Exception exe)
        {
            _logger.LogError(exe, $"Error al consultar estado de autenticación de usuario");
        }
    }

    private async void Ingresar()
    {
        try
        {
            await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

            token = await _jsRuntime.InvokeAsync<string>("runCaptcha");
            googleREspo = await _googlereCaptchaService.reVerify(token);

            if (!googleREspo.success)
            {
                await _jsRuntime.SweetAlertUsual("Error", "Autenticación de recaptcha fallida", TipoMensajeSweetAlert.error);
                return;
            }

            if (string.IsNullOrEmpty(usuario.usuario))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe diligenciar el usuario", TipoMensajeSweetAlert.error);
                return;
            }

            if (string.IsNullOrEmpty(usuario.pass))
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe diligenciar la contraseña", TipoMensajeSweetAlert.error);
                return;
            }

            var remoteIpAddress = await _jsRuntime.GetIpAddress();

            ResponseDTO respuesta = await _userService.loginUsuario(usuario, remoteIpAddress);

            if (respuesta.estado.Equals("OK"))
            {
                await _jsRuntime.InvokeVoidAsync("Swal.close");

                Dictionary<string, string> parametros = new Dictionary<string, string>()
                {
                    {"usuario",usuario.usuario},
                    {"rememberme", rememberMe.ToString()},
                    {"idauditorialogin",respuesta.descripcion}
                };

                string parametro_encriptado = _encryptService.encriptarParametros(parametros);

                Usuario user = await _userService.getUsuarioByUser(usuario.usuario);

                if (user.TWOFA_ENABLED)
                {
                    _navigationManager.NavigateTo($"/TFALogin/{parametro_encriptado}", forceLoad: true);
                }
                else
                {
                    _navigationManager.NavigateTo($"/OtpLogin/{parametro_encriptado}", forceLoad: true);
                }
            }
            else if (respuesta.estado.Equals("WARNING"))
            {
                await _jsRuntime.SweetAlertUsual("Advertencia", respuesta.descripcion, TipoMensajeSweetAlert.warning);
                return;
            }
            else
            {
                _logger.LogInformation($"Error en login para usuario {usuario.usuario} : {respuesta.descripcion}");
                await _jsRuntime.SweetAlertUsual("Error", respuesta.descripcion, TipoMensajeSweetAlert.error);
                return;
            }
        }
        catch (Exception exe)
        {
            await _jsRuntime.InvokeVoidAsync("Swal.close");
            await _jsRuntime.SweetAlertUsual("Error", "Error interno del servidor", TipoMensajeSweetAlert.error);
            _logger.LogError(exe, $"Error al realizar login para usuario {usuario.usuario}");
        }
    }

    private async void OlvidePass()
    {
        _navigationManager.NavigateTo("/ReestablecerContraseña");
    }

    private async Task LimpiarSesion()
    {
        try
        {
            //Authentication Provider
            var customAuthStateProvider = (CustomAuthenticationStateProvider)_authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(null);
            CircuitHandlerService handler = (CircuitHandlerService)BlazorCircuitHandler;
            _circuitUserServer.Disconnect(handler.CirtuidId);
        }
        catch (Exception exe)
        {
            _logger.LogError(exe, "Error al limpiar sesión");
        }
    }
}