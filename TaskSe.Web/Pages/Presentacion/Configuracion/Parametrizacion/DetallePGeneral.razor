@attribute [PageInfo(id_modulo = "15")]

@page "/Presentacion/Configuracion/Parametrizacion/DetalleParametroGeneral"
@page "/Presentacion/Configuracion/Parametrizacion/DetalleParametroGeneral/{id_parametro_general}"
@using TaskSe.Model.Models.Par;
@using TaskSe.Services.Interfaces.Par;
@using TaskSe.Web.Authentication;


@inject IParametroGeneralService _pGeneralService
@inject ILogger<DetallePGeneral> _logger

<div class="row">
    <div class="col-sm-6">
        <div class="page-title-box">
            <h4>Parámetros Generales:</h4>
            <ol class="breadcrumb m-0">
                <li class="breadcrumb-item"><a href="javascript: void(0);">Configuración de Activos</a></li>
                <li class="breadcrumb-item"><a href="javascript: void(0);">Parametrización</a></li>
                <li class="breadcrumb-item"><a href="javascript: void(0);">Parámetros Generales</a></li>
            </ol>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <_Loading></_Loading>
}
else
{
    <div class="row">
        <div class="col-sm-12">
            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Información del Parámetro General</h4>
                    <p class="card-title-desc"></p>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label class="form-label">Nombre</label>
                                <input type="text" class="form-control" @bind-value="parametroGeneral.nombre_parametro_general" />
                            </div>
                        </div>
                        <div class="col-md-12">
                            <h4 class="card-title">Parámetros Detallados</h4>
                            <p class="card-title-desc"></p>

                            <br>
                            <br>
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th scope="col">#</th>
                                            <th scope="col">Nombre</th>
                                            <th scope="col"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int i = 1;
                                        }
                                        @foreach (var p in parametroGeneral.listaParametrosDetallados)
                                        {
                                            <_ParametroDetallado pDetallado=@p consecutivo=@i eventoEliminarPDetallado=@(() => EliminarPDetallado(p))></_ParametroDetallado>
                                            i++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                            
                            <input type="image" src="assetsMainSite/images/sign-add-icon.png" width="40" style="float:right" @onclick="AgregarPDetallado">
                        </div>
                    </div> 
                    <br>
                    <br>
                    <button class="btn btn-primary" type="button" @onclick="InsertarParametroGeneral">Aceptar</button>
                    <button class="btn btn-secondary" type="button" @onclick=@(() => _navigationManager.NavigateTo("/Presentacion/Configuracion/Parametrizacion/ConsultaParametroGeneral"))>Volver</button>
                </div>
         </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string id_parametro_general { get; set; } = "";

    private bool _isLoading = true;

    private ParametroGeneral parametroGeneral = new ParametroGeneral();

    [CascadingParameter]
    protected UserSession? userSession { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try{
            if(firstRender){
                _isLoading = true;
                StateHasChanged();

                if (!string.IsNullOrEmpty(id_parametro_general))
                {
                    parametroGeneral = await _pGeneralService.consultarParametroGeneral(id_parametro_general);
                }

                _isLoading = false;
                StateHasChanged();
            }
        }
        catch(Exception exe){
            _logger.LogError(exe, $"Error al consultar parámetro general {id_parametro_general}");
            await _jsRuntime.SweetAlertUsual("Error", "Error al consultar la información del parámetro general", TipoMensajeSweetAlert.error);
        }
    }

    private async Task InsertarParametroGeneral(){
        try{
            if(string.IsNullOrEmpty(parametroGeneral.nombre_parametro_general)){
                await _jsRuntime.SweetAlertUsual("Error", "Debe indicar el nombre del parámetro general", TipoMensajeSweetAlert.error);
                return;
            }

            if (parametroGeneral.listaParametrosDetallados.Count <= 0)
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe indicar al menos un parámetro detallado", TipoMensajeSweetAlert.error);
                return;
            }

            if (!await validarPDetallados())
            {
                await _jsRuntime.SweetAlertUsual("Error", "Debe diligenciar todos los datos para cada parámetro detallado", TipoMensajeSweetAlert.error);
                return;
            }

            await _jsRuntime.SweetAlertLoading("Procesando", "Procesando solicitud");

            string usuario = userSession.UserName;

            if(await _pGeneralService.insertarInfoParametroGeneral(parametroGeneral,usuario)){
                await _jsRuntime.SweetAlertConfirmSuccess("Correcto", "Proceso realizado correctamente", TipoMensajeSweetAlert.success);
                _navigationManager.NavigateTo("/Presentacion/Configuracion/Parametrizacion/ConsultaParametroGeneral");
            }
            else{
                await _jsRuntime.SweetAlertUsual("Error", "Error al guardar la información del parámetro general", TipoMensajeSweetAlert.error);
            }
        }
        catch(Exception exe){
            _logger.LogError(exe, $"Error al guardar la información del parámetro general {id_parametro_general}");
            await _jsRuntime.SweetAlertUsual("Error", "Error al guardar la información del parámetro general", TipoMensajeSweetAlert.error);
        }
    }

    private async Task<bool> validarPDetallados(){
        foreach(var p in parametroGeneral.listaParametrosDetallados){
            if (!await _pGeneralService.validarParametroDetallado(p)) return false;
        }

        return true;
    }

    private async Task EliminarPDetallado(ParametroDetallado pGeneral){
        try{
            if(await _jsRuntime.SweetAlertConfirm("Eliminar parametro detallado","¿Está seguro de eliminar definitivamente este parámetro detallado?",TipoMensajeSweetAlert.question)){
                await _pGeneralService.eliminarParametroDetallado(pGeneral.id_parametro_detallado);
                parametroGeneral.listaParametrosDetallados.Remove(pGeneral);
            }
        }
        catch(Exception exe){
            _logger.LogError(exe, $"Error al eliminar parámetro detallado {pGeneral.id_parametro_detallado}");
            await _jsRuntime.SweetAlertUsual("Error", "Error al eliminar este parámetro detallado",TipoMensajeSweetAlert.error);
        }
    }

    private async Task AgregarPDetallado(){
        parametroGeneral.listaParametrosDetallados.Add(new ParametroDetallado());
    }
}
